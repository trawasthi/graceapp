{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/startek/Desktop/Grace/node_modules/react-native-modal/src/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport * as animatable from 'react-native-animatable';\nimport { initializeAnimations, buildAnimations } from \"./utils\";\nimport styles from \"./index.style.js\";\ninitializeAnimations();\n\nvar reversePercentage = function reversePercentage(x) {\n  return -(x - 1);\n};\n\nvar ReactNativeModal = function (_Component) {\n  _inherits(ReactNativeModal, _Component);\n\n  _createClass(ReactNativeModal, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, state) {\n      if (!state.isVisible && nextProps.isVisible) {\n        return {\n          isVisible: true,\n          showContent: true\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  function ReactNativeModal(props) {\n    var _this;\n\n    _classCallCheck(this, ReactNativeModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactNativeModal).call(this, props));\n    _this.state = {\n      showContent: true,\n      isVisible: false,\n      deviceWidth: Dimensions.get('window').width,\n      deviceHeight: Dimensions.get('window').height,\n      isSwipeable: _this.props.swipeDirection ? true : false,\n      pan: null\n    };\n    _this.isTransitioning = false;\n    _this.inSwipeClosingState = false;\n    _this.currentSwipingDirection = null;\n\n    _this.buildPanResponder = function () {\n      var animEvt = null;\n      _this.panResponder = PanResponder.create({\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {\n          if (!_this.props.propagateSwipe) {\n            var shouldSetPanResponder = Math.abs(gestureState.dx) >= 4 || Math.abs(gestureState.dy) >= 4;\n\n            if (shouldSetPanResponder && _this.props.onSwipeStart) {\n              _this.props.onSwipeStart();\n            }\n\n            _this.currentSwipingDirection = _this.getSwipingDirection(gestureState);\n            animEvt = _this.createAnimationEventForSwipe();\n            return shouldSetPanResponder;\n          }\n        },\n        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n          if (_this.props.scrollTo && _this.props.scrollOffset > 0) {\n            return false;\n          }\n\n          if (_this.props.onSwipeStart) {\n            _this.props.onSwipeStart();\n          }\n\n          _this.currentSwipingDirection = null;\n          return true;\n        },\n        onPanResponderMove: function onPanResponderMove(evt, gestureState) {\n          if (!_this.currentSwipingDirection) {\n            if (gestureState.dx === 0 && gestureState.dy === 0) {\n              return;\n            }\n\n            _this.currentSwipingDirection = _this.getSwipingDirection(gestureState);\n            animEvt = _this.createAnimationEventForSwipe();\n          }\n\n          if (_this.isSwipeDirectionAllowed(gestureState)) {\n            var newOpacityFactor = 1 - _this.calcDistancePercentage(gestureState);\n\n            _this.backdropRef && _this.backdropRef.transitionTo({\n              opacity: _this.props.backdropOpacity * newOpacityFactor\n            });\n            animEvt(evt, gestureState);\n\n            if (_this.props.onSwipeMove) {\n              _this.props.onSwipeMove(newOpacityFactor);\n            }\n          } else {\n            if (_this.props.scrollTo) {\n              if (_this.props.scrollHorizontal) {\n                var offsetX = -gestureState.dx;\n\n                if (offsetX > _this.props.scrollOffsetMax) {\n                  offsetX -= (offsetX - _this.props.scrollOffsetMax) / 2;\n                }\n\n                _this.props.scrollTo({\n                  x: offsetX,\n                  animated: false\n                });\n              } else {\n                var offsetY = -gestureState.dy;\n\n                if (offsetY > _this.props.scrollOffsetMax) {\n                  offsetY -= (offsetY - _this.props.scrollOffsetMax) / 2;\n                }\n\n                _this.props.scrollTo({\n                  y: offsetY,\n                  animated: false\n                });\n              }\n            }\n          }\n        },\n        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {\n          var accDistance = _this.getAccDistancePerDirection(gestureState);\n\n          if (accDistance > _this.props.swipeThreshold && _this.isSwipeDirectionAllowed(gestureState)) {\n            if (_this.props.onSwipeComplete) {\n              _this.inSwipeClosingState = true;\n\n              _this.props.onSwipeComplete({\n                swipingDirection: _this.getSwipingDirection(gestureState)\n              });\n\n              return;\n            }\n\n            if (_this.props.onSwipe) {\n              _this.inSwipeClosingState = true;\n\n              _this.props.onSwipe();\n\n              return;\n            }\n          }\n\n          if (_this.props.onSwipeCancel) {\n            _this.props.onSwipeCancel();\n          }\n\n          if (_this.backdropRef) {\n            _this.backdropRef.transitionTo({\n              opacity: _this.props.backdropOpacity\n            });\n          }\n\n          Animated.spring(_this.state.pan, {\n            toValue: {\n              x: 0,\n              y: 0\n            },\n            bounciness: 0\n          }).start();\n\n          if (_this.props.scrollOffset > _this.props.scrollOffsetMax) {\n            _this.props.scrollTo({\n              y: _this.props.scrollOffsetMax,\n              animated: true\n            });\n          }\n        }\n      });\n    };\n\n    _this.getAccDistancePerDirection = function (gestureState) {\n      switch (_this.currentSwipingDirection) {\n        case 'up':\n          return -gestureState.dy;\n\n        case 'down':\n          return gestureState.dy;\n\n        case 'right':\n          return gestureState.dx;\n\n        case 'left':\n          return -gestureState.dx;\n\n        default:\n          return 0;\n      }\n    };\n\n    _this.getSwipingDirection = function (gestureState) {\n      if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n        return gestureState.dx > 0 ? 'right' : 'left';\n      }\n\n      return gestureState.dy > 0 ? 'down' : 'up';\n    };\n\n    _this.calcDistancePercentage = function (gestureState) {\n      switch (_this.currentSwipingDirection) {\n        case 'down':\n          return (gestureState.moveY - gestureState.y0) / ((_this.props.deviceHeight || _this.state.deviceHeight) - gestureState.y0);\n\n        case 'up':\n          return reversePercentage(gestureState.moveY / gestureState.y0);\n\n        case 'left':\n          return reversePercentage(gestureState.moveX / gestureState.x0);\n\n        case 'right':\n          return (gestureState.moveX - gestureState.x0) / ((_this.props.deviceWidth || _this.state.deviceWidth) - gestureState.x0);\n\n        default:\n          return 0;\n      }\n    };\n\n    _this.createAnimationEventForSwipe = function () {\n      if (_this.currentSwipingDirection === 'right' || _this.currentSwipingDirection === 'left') {\n        return Animated.event([null, {\n          dx: _this.state.pan.x\n        }]);\n      } else {\n        return Animated.event([null, {\n          dy: _this.state.pan.y\n        }]);\n      }\n    };\n\n    _this.isDirectionIncluded = function (direction) {\n      return Array.isArray(_this.props.swipeDirection) ? _this.props.swipeDirection.includes(direction) : _this.props.swipeDirection === direction;\n    };\n\n    _this.isSwipeDirectionAllowed = function (_ref) {\n      var dy = _ref.dy,\n          dx = _ref.dx;\n      var draggedDown = dy > 0;\n      var draggedUp = dy < 0;\n      var draggedLeft = dx < 0;\n      var draggedRight = dx > 0;\n\n      if (_this.currentSwipingDirection === 'up' && _this.isDirectionIncluded('up') && draggedUp) {\n        return true;\n      } else if (_this.currentSwipingDirection === 'down' && _this.isDirectionIncluded('down') && draggedDown) {\n        return true;\n      } else if (_this.currentSwipingDirection === 'right' && _this.isDirectionIncluded('right') && draggedRight) {\n        return true;\n      } else if (_this.currentSwipingDirection === 'left' && _this.isDirectionIncluded('left') && draggedLeft) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleDimensionsUpdate = function (dimensionsUpdate) {\n      if (!_this.props.deviceHeight && !_this.props.deviceWidth) {\n        var deviceWidth = Dimensions.get('window').width;\n        var deviceHeight = Dimensions.get('window').height;\n\n        if (deviceWidth !== _this.state.deviceWidth || deviceHeight !== _this.state.deviceHeight) {\n          _this.setState({\n            deviceWidth: deviceWidth,\n            deviceHeight: deviceHeight\n          });\n        }\n      }\n    };\n\n    _this.open = function () {\n      if (_this.isTransitioning) {\n        return;\n      }\n\n      _this.isTransitioning = true;\n\n      if (_this.backdropRef) {\n        _this.backdropRef.transitionTo({\n          opacity: _this.props.backdropOpacity\n        }, _this.props.backdropTransitionInTiming);\n      }\n\n      if (_this.state.isSwipeable) {\n        _this.state.pan.setValue({\n          x: 0,\n          y: 0\n        });\n      }\n\n      if (_this.contentRef) {\n        _this.props.onModalWillShow && _this.props.onModalWillShow();\n\n        _this.contentRef[_this.animationIn](_this.props.animationInTiming).then(function () {\n          _this.isTransitioning = false;\n\n          if (!_this.props.isVisible) {\n            _this.close();\n          } else {\n            _this.props.onModalShow();\n          }\n        });\n      }\n    };\n\n    _this.close = function () {\n      if (_this.isTransitioning) {\n        return;\n      }\n\n      _this.isTransitioning = true;\n\n      if (_this.backdropRef) {\n        _this.backdropRef.transitionTo({\n          opacity: 0\n        }, _this.props.backdropTransitionOutTiming);\n      }\n\n      var animationOut = _this.animationOut;\n\n      if (_this.inSwipeClosingState) {\n        _this.inSwipeClosingState = false;\n\n        if (_this.currentSwipingDirection === 'up') {\n          animationOut = 'slideOutUp';\n        } else if (_this.currentSwipingDirection === 'down') {\n          animationOut = 'slideOutDown';\n        } else if (_this.currentSwipingDirection === 'right') {\n          animationOut = 'slideOutRight';\n        } else if (_this.currentSwipingDirection === 'left') {\n          animationOut = 'slideOutLeft';\n        }\n      }\n\n      if (_this.contentRef) {\n        _this.props.onModalWillHide && _this.props.onModalWillHide();\n\n        _this.contentRef[animationOut](_this.props.animationOutTiming).then(function () {\n          _this.isTransitioning = false;\n\n          if (_this.props.isVisible) {\n            _this.open();\n          } else {\n            _this.setState({\n              showContent: false\n            }, function () {\n              _this.setState({\n                isVisible: false\n              }, function () {\n                _this.props.onModalHide();\n              });\n            });\n          }\n        });\n      }\n    };\n\n    var _buildAnimations = buildAnimations(props),\n        animationIn = _buildAnimations.animationIn,\n        _animationOut = _buildAnimations.animationOut;\n\n    _this.animationIn = animationIn;\n    _this.animationOut = _animationOut;\n\n    if (_this.state.isSwipeable) {\n      _this.state = _objectSpread({}, _this.state, {\n        pan: new Animated.ValueXY()\n      });\n\n      _this.buildPanResponder();\n    }\n\n    if (_this.props.isVisible) {\n      _this.state = _objectSpread({}, _this.state, {\n        isVisible: true,\n        showContent: true\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(ReactNativeModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.onSwipe) {\n        console.warn('`<Modal onSwipe=\"...\" />` is deprecated. Use `<Modal onSwipeComplete=\"...\" />` instead.');\n      }\n\n      DeviceEventEmitter.addListener('didUpdateDimensions', this.handleDimensionsUpdate);\n\n      if (this.state.isVisible) {\n        this.open();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      DeviceEventEmitter.removeListener('didUpdateDimensions', this.handleDimensionsUpdate);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.animationIn !== prevProps.animationIn || this.props.animationOut !== prevProps.animationOut) {\n        var _buildAnimations2 = buildAnimations(this.props),\n            animationIn = _buildAnimations2.animationIn,\n            animationOut = _buildAnimations2.animationOut;\n\n        this.animationIn = animationIn;\n        this.animationOut = animationOut;\n      }\n\n      if (this.props.backdropOpacity !== prevProps.backdropOpacity && this.backdropRef) {\n        this.backdropRef.transitionTo({\n          opacity: this.props.backdropOpacity\n        }, this.props.backdropTransitionInTiming);\n      }\n\n      if (this.props.isVisible && !prevProps.isVisible) {\n        this.open();\n      } else if (!this.props.isVisible && prevProps.isVisible) {\n        this.close();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          animationIn = _this$props.animationIn,\n          animationInTiming = _this$props.animationInTiming,\n          animationOut = _this$props.animationOut,\n          animationOutTiming = _this$props.animationOutTiming,\n          avoidKeyboard = _this$props.avoidKeyboard,\n          coverScreen = _this$props.coverScreen,\n          hasBackdrop = _this$props.hasBackdrop,\n          backdropColor = _this$props.backdropColor,\n          backdropOpacity = _this$props.backdropOpacity,\n          backdropTransitionInTiming = _this$props.backdropTransitionInTiming,\n          backdropTransitionOutTiming = _this$props.backdropTransitionOutTiming,\n          customBackdrop = _this$props.customBackdrop,\n          children = _this$props.children,\n          deviceHeightProp = _this$props.deviceHeight,\n          deviceWidthProp = _this$props.deviceWidth,\n          isVisible = _this$props.isVisible,\n          onModalShow = _this$props.onModalShow,\n          onBackdropPress = _this$props.onBackdropPress,\n          onBackButtonPress = _this$props.onBackButtonPress,\n          useNativeDriver = _this$props.useNativeDriver,\n          propagateSwipe = _this$props.propagateSwipe,\n          style = _this$props.style,\n          otherProps = _objectWithoutProperties(_this$props, [\"animationIn\", \"animationInTiming\", \"animationOut\", \"animationOutTiming\", \"avoidKeyboard\", \"coverScreen\", \"hasBackdrop\", \"backdropColor\", \"backdropOpacity\", \"backdropTransitionInTiming\", \"backdropTransitionOutTiming\", \"customBackdrop\", \"children\", \"deviceHeight\", \"deviceWidth\", \"isVisible\", \"onModalShow\", \"onBackdropPress\", \"onBackButtonPress\", \"useNativeDriver\", \"propagateSwipe\", \"style\"]);\n\n      var deviceWidth = deviceWidthProp || this.state.deviceWidth;\n      var deviceHeight = deviceHeightProp || this.state.deviceHeight;\n      var computedStyle = [{\n        margin: deviceWidth * 0.05,\n        transform: [{\n          translateY: 0\n        }]\n      }, styles.content, style];\n      var panHandlers = {};\n      var panPosition = {};\n\n      if (this.state.isSwipeable) {\n        panHandlers = _objectSpread({}, this.panResponder.panHandlers);\n\n        if (useNativeDriver) {\n          panPosition = {\n            transform: this.state.pan.getTranslateTransform()\n          };\n        } else {\n          panPosition = this.state.pan.getLayout();\n        }\n      }\n\n      var _children = this.props.hideModalContentWhileAnimating && this.props.useNativeDriver && !this.state.showContent ? React.createElement(animatable.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588\n        }\n      }) : children;\n\n      var containerView = React.createElement(animatable.View, _extends({}, panHandlers, {\n        ref: function ref(_ref2) {\n          return _this2.contentRef = _ref2;\n        },\n        style: [panPosition, computedStyle],\n        pointerEvents: \"box-none\",\n        useNativeDriver: useNativeDriver\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593\n        }\n      }), _children);\n      var hasCustomBackdrop = React.isValidElement(customBackdrop);\n      var backdropContent = React.createElement(animatable.View, {\n        ref: function ref(_ref3) {\n          return _this2.backdropRef = _ref3;\n        },\n        useNativeDriver: useNativeDriver,\n        style: [styles.backdrop, {\n          width: deviceWidth,\n          height: deviceHeight,\n          backgroundColor: this.state.showContent && !hasCustomBackdrop ? backdropColor : 'transparent'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        }\n      }, hasCustomBackdrop && customBackdrop);\n      var backdrop = null;\n\n      if (hasCustomBackdrop) {\n        backdrop = backdropContent;\n      } else {\n        backdrop = React.createElement(TouchableWithoutFeedback, {\n          onPress: onBackdropPress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 634\n          }\n        }, backdropContent);\n      }\n\n      if (!coverScreen && this.state.isVisible) {\n        return React.createElement(View, {\n          pointerEvents: \"box-none\",\n          style: [styles.backdrop, {\n            zIndex: 2,\n            opacity: 1,\n            backgroundColor: 'transparent'\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 642\n          }\n        }, hasBackdrop && backdrop, containerView);\n      }\n\n      return React.createElement(Modal, _extends({\n        transparent: true,\n        animationType: 'none',\n        visible: this.state.isVisible,\n        onRequestClose: onBackButtonPress\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656\n        }\n      }), hasBackdrop && backdrop, avoidKeyboard && React.createElement(KeyboardAvoidingView, {\n        behavior: Platform.OS === 'ios' ? 'padding' : null,\n        pointerEvents: \"box-none\",\n        style: computedStyle.concat([{\n          margin: 0\n        }]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666\n        }\n      }, containerView), !avoidKeyboard && containerView);\n    }\n  }]);\n\n  return ReactNativeModal;\n}(Component);\n\nReactNativeModal.propTypes = {\n  animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animationInTiming: PropTypes.number,\n  animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animationOutTiming: PropTypes.number,\n  avoidKeyboard: PropTypes.bool,\n  coverScreen: PropTypes.bool,\n  hasBackdrop: PropTypes.bool,\n  backdropColor: PropTypes.string,\n  backdropOpacity: PropTypes.number,\n  backdropTransitionInTiming: PropTypes.number,\n  backdropTransitionOutTiming: PropTypes.number,\n  customBackdrop: PropTypes.node,\n  children: PropTypes.node.isRequired,\n  deviceHeight: PropTypes.number,\n  deviceWidth: PropTypes.number,\n  isVisible: PropTypes.bool.isRequired,\n  hideModalContentWhileAnimating: PropTypes.bool,\n  propagateSwipe: PropTypes.bool,\n  onModalShow: PropTypes.func,\n  onModalWillShow: PropTypes.func,\n  onModalHide: PropTypes.func,\n  onModalWillHide: PropTypes.func,\n  onBackButtonPress: PropTypes.func,\n  onBackdropPress: PropTypes.func,\n  onSwipeStart: PropTypes.func,\n  onSwipeMove: PropTypes.func,\n  onSwipeComplete: PropTypes.func,\n  onSwipeCancel: PropTypes.func,\n  swipeThreshold: PropTypes.number,\n  swipeDirection: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOf(['up', 'down', 'left', 'right'])), PropTypes.oneOf(['up', 'down', 'left', 'right'])]),\n  useNativeDriver: PropTypes.bool,\n  style: PropTypes.any,\n  scrollTo: PropTypes.func,\n  scrollOffset: PropTypes.number,\n  scrollOffsetMax: PropTypes.number,\n  scrollHorizontal: PropTypes.bool,\n  supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right']))\n};\nReactNativeModal.defaultProps = {\n  animationIn: 'slideInUp',\n  animationInTiming: 300,\n  animationOut: 'slideOutDown',\n  animationOutTiming: 300,\n  avoidKeyboard: false,\n  coverScreen: true,\n  hasBackdrop: true,\n  backdropColor: 'black',\n  backdropOpacity: 0.7,\n  backdropTransitionInTiming: 300,\n  backdropTransitionOutTiming: 300,\n  customBackdrop: null,\n  onModalShow: function onModalShow() {\n    return null;\n  },\n  onModalWillShow: function onModalWillShow() {\n    return null;\n  },\n  deviceHeight: null,\n  deviceWidth: null,\n  onModalHide: function onModalHide() {\n    return null;\n  },\n  onModalWillHide: function onModalWillHide() {\n    return null;\n  },\n  isVisible: false,\n  hideModalContentWhileAnimating: false,\n  propagateSwipe: PropTypes.false,\n  onBackdropPress: function onBackdropPress() {\n    return null;\n  },\n  onBackButtonPress: function onBackButtonPress() {\n    return null;\n  },\n  swipeThreshold: 100,\n  useNativeDriver: false,\n  scrollTo: null,\n  scrollOffset: 0,\n  scrollOffsetMax: 0,\n  scrollHorizontal: false,\n  supportedOrientations: ['portrait', 'landscape']\n};\nexport default ReactNativeModal;\nexport { ReactNativeModal };","map":{"version":3,"sources":["/Users/startek/Desktop/Grace/node_modules/react-native-modal/src/index.js"],"names":["React","Component","PropTypes","animatable","initializeAnimations","buildAnimations","styles","reversePercentage","x","ReactNativeModal","nextProps","state","isVisible","showContent","props","deviceWidth","Dimensions","get","width","deviceHeight","height","isSwipeable","swipeDirection","pan","isTransitioning","inSwipeClosingState","currentSwipingDirection","buildPanResponder","animEvt","panResponder","PanResponder","create","onMoveShouldSetPanResponder","evt","gestureState","propagateSwipe","shouldSetPanResponder","Math","abs","dx","dy","onSwipeStart","getSwipingDirection","createAnimationEventForSwipe","onStartShouldSetPanResponder","scrollTo","scrollOffset","onPanResponderMove","isSwipeDirectionAllowed","newOpacityFactor","calcDistancePercentage","backdropRef","transitionTo","opacity","backdropOpacity","onSwipeMove","scrollHorizontal","offsetX","scrollOffsetMax","animated","offsetY","y","onPanResponderRelease","accDistance","getAccDistancePerDirection","swipeThreshold","onSwipeComplete","swipingDirection","onSwipe","onSwipeCancel","Animated","spring","toValue","bounciness","start","moveY","y0","moveX","x0","event","isDirectionIncluded","direction","Array","isArray","includes","draggedDown","draggedUp","draggedLeft","draggedRight","handleDimensionsUpdate","dimensionsUpdate","setState","open","backdropTransitionInTiming","setValue","contentRef","onModalWillShow","animationIn","animationInTiming","then","close","onModalShow","backdropTransitionOutTiming","animationOut","onModalWillHide","animationOutTiming","onModalHide","ValueXY","console","warn","DeviceEventEmitter","addListener","removeListener","prevProps","prevState","avoidKeyboard","coverScreen","hasBackdrop","backdropColor","customBackdrop","children","deviceHeightProp","deviceWidthProp","onBackdropPress","onBackButtonPress","useNativeDriver","style","otherProps","computedStyle","margin","transform","translateY","content","panHandlers","panPosition","getTranslateTransform","getLayout","_children","hideModalContentWhileAnimating","containerView","ref","hasCustomBackdrop","isValidElement","backdropContent","backdrop","backgroundColor","zIndex","Platform","OS","concat","propTypes","oneOfType","string","object","number","bool","node","isRequired","func","arrayOf","oneOf","any","supportedOrientations","defaultProps","false"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;;;;AAYA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,UAAZ,MAA4B,yBAA5B;AACA,SAASC,oBAAT,EAA+BC,eAA/B;AAEA,OAAOC,MAAP;AAGAF,oBAAoB;;AAEpB,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,CAAC;AAAA,SAAI,EAAEA,CAAC,GAAG,CAAN,CAAJ;AAAA,CAA3B;;IAEMC,gB;;;;;6CAqF4BC,S,EAAWC,K,EAAO;AAChD,UAAI,CAACA,KAAK,CAACC,SAAP,IAAoBF,SAAS,CAACE,SAAlC,EAA6C;AAC3C,eAAO;AAAEA,UAAAA,SAAS,EAAE,IAAb;AAAmBC,UAAAA,WAAW,EAAE;AAAhC,SAAP;AACD;;AACD,aAAO,IAAP;AACD;;;AAoBD,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,0FAAMA,KAAN;AADiB,UAbnBH,KAamB,GAbX;AACNE,MAAAA,WAAW,EAAE,IADP;AAEND,MAAAA,SAAS,EAAE,KAFL;AAGNG,MAAAA,WAAW,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAHhC;AAINC,MAAAA,YAAY,EAAEH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAJjC;AAKNC,MAAAA,WAAW,EAAE,MAAKP,KAAL,CAAWQ,cAAX,GAA4B,IAA5B,GAAmC,KAL1C;AAMNC,MAAAA,GAAG,EAAE;AANC,KAaW;AAAA,UAJnBC,eAImB,GAJD,KAIC;AAAA,UAHnBC,mBAGmB,GAHG,KAGH;AAAA,UAFnBC,uBAEmB,GAFO,IAEP;;AAAA,UAuEnBC,iBAvEmB,GAuEC,YAAM;AACxB,UAAIC,OAAO,GAAG,IAAd;AAEA,YAAKC,YAAL,GAAoBC,YAAY,CAACC,MAAb,CAAoB;AACtCC,QAAAA,2BAA2B,EAAE,qCAACC,GAAD,EAAMC,YAAN,EAAuB;AAGlD,cAAI,CAAC,MAAKpB,KAAL,CAAWqB,cAAhB,EAAgC;AAK9B,gBAAMC,qBAAqB,GACzBC,IAAI,CAACC,GAAL,CAASJ,YAAY,CAACK,EAAtB,KAA6B,CAA7B,IAAkCF,IAAI,CAACC,GAAL,CAASJ,YAAY,CAACM,EAAtB,KAA6B,CADjE;;AAEA,gBAAIJ,qBAAqB,IAAI,MAAKtB,KAAL,CAAW2B,YAAxC,EAAsD;AACpD,oBAAK3B,KAAL,CAAW2B,YAAX;AACD;;AAED,kBAAKf,uBAAL,GAA+B,MAAKgB,mBAAL,CAAyBR,YAAzB,CAA/B;AACAN,YAAAA,OAAO,GAAG,MAAKe,4BAAL,EAAV;AACA,mBAAOP,qBAAP;AACD;AACF,SAnBqC;AAoBtCQ,QAAAA,4BAA4B,EAAE,wCAAM;AAClC,cAAI,MAAK9B,KAAL,CAAW+B,QAAX,IAAuB,MAAK/B,KAAL,CAAWgC,YAAX,GAA0B,CAArD,EAAwD;AACtD,mBAAO,KAAP;AACD;;AACD,cAAI,MAAKhC,KAAL,CAAW2B,YAAf,EAA6B;AAC3B,kBAAK3B,KAAL,CAAW2B,YAAX;AACD;;AAID,gBAAKf,uBAAL,GAA+B,IAA/B;AACA,iBAAO,IAAP;AACD,SAhCqC;AAiCtCqB,QAAAA,kBAAkB,EAAE,4BAACd,GAAD,EAAMC,YAAN,EAAuB;AAGzC,cAAI,CAAC,MAAKR,uBAAV,EAAmC;AACjC,gBAAIQ,YAAY,CAACK,EAAb,KAAoB,CAApB,IAAyBL,YAAY,CAACM,EAAb,KAAoB,CAAjD,EAAoD;AAClD;AACD;;AAED,kBAAKd,uBAAL,GAA+B,MAAKgB,mBAAL,CAAyBR,YAAzB,CAA/B;AACAN,YAAAA,OAAO,GAAG,MAAKe,4BAAL,EAAV;AACD;;AAED,cAAI,MAAKK,uBAAL,CAA6Bd,YAA7B,CAAJ,EAAgD;AAE9C,gBAAMe,gBAAgB,GACpB,IAAI,MAAKC,sBAAL,CAA4BhB,YAA5B,CADN;;AAGA,kBAAKiB,WAAL,IACE,MAAKA,WAAL,CAAiBC,YAAjB,CAA8B;AAC5BC,cAAAA,OAAO,EAAE,MAAKvC,KAAL,CAAWwC,eAAX,GAA6BL;AADV,aAA9B,CADF;AAKArB,YAAAA,OAAO,CAACK,GAAD,EAAMC,YAAN,CAAP;;AAEA,gBAAI,MAAKpB,KAAL,CAAWyC,WAAf,EAA4B;AAC1B,oBAAKzC,KAAL,CAAWyC,WAAX,CAAuBN,gBAAvB;AACD;AACF,WAfD,MAeO;AACL,gBAAI,MAAKnC,KAAL,CAAW+B,QAAf,EAAyB;AACvB,kBAAI,MAAK/B,KAAL,CAAW0C,gBAAf,EAAiC;AAC/B,oBAAIC,OAAO,GAAG,CAACvB,YAAY,CAACK,EAA5B;;AACA,oBAAIkB,OAAO,GAAG,MAAK3C,KAAL,CAAW4C,eAAzB,EAA0C;AACxCD,kBAAAA,OAAO,IAAI,CAACA,OAAO,GAAG,MAAK3C,KAAL,CAAW4C,eAAtB,IAAyC,CAApD;AACD;;AAED,sBAAK5C,KAAL,CAAW+B,QAAX,CAAoB;AAAErC,kBAAAA,CAAC,EAAEiD,OAAL;AAAcE,kBAAAA,QAAQ,EAAE;AAAxB,iBAApB;AACD,eAPD,MAOO;AACL,oBAAIC,OAAO,GAAG,CAAC1B,YAAY,CAACM,EAA5B;;AACA,oBAAIoB,OAAO,GAAG,MAAK9C,KAAL,CAAW4C,eAAzB,EAA0C;AACxCE,kBAAAA,OAAO,IAAI,CAACA,OAAO,GAAG,MAAK9C,KAAL,CAAW4C,eAAtB,IAAyC,CAApD;AACD;;AAED,sBAAK5C,KAAL,CAAW+B,QAAX,CAAoB;AAAEgB,kBAAAA,CAAC,EAAED,OAAL;AAAcD,kBAAAA,QAAQ,EAAE;AAAxB,iBAApB;AACD;AACF;AACF;AACF,SA/EqC;AAgFtCG,QAAAA,qBAAqB,EAAE,+BAAC7B,GAAD,EAAMC,YAAN,EAAuB;AAE5C,cAAM6B,WAAW,GAAG,MAAKC,0BAAL,CAAgC9B,YAAhC,CAApB;;AACA,cACE6B,WAAW,GAAG,MAAKjD,KAAL,CAAWmD,cAAzB,IACA,MAAKjB,uBAAL,CAA6Bd,YAA7B,CAFF,EAGE;AACA,gBAAI,MAAKpB,KAAL,CAAWoD,eAAf,EAAgC;AAC9B,oBAAKzC,mBAAL,GAA2B,IAA3B;;AACA,oBAAKX,KAAL,CAAWoD,eAAX,CAA2B;AACzBC,gBAAAA,gBAAgB,EAAE,MAAKzB,mBAAL,CAAyBR,YAAzB;AADO,eAA3B;;AAGA;AACD;;AAED,gBAAI,MAAKpB,KAAL,CAAWsD,OAAf,EAAwB;AACtB,oBAAK3C,mBAAL,GAA2B,IAA3B;;AACA,oBAAKX,KAAL,CAAWsD,OAAX;;AACA;AACD;AACF;;AAGD,cAAI,MAAKtD,KAAL,CAAWuD,aAAf,EAA8B;AAC5B,kBAAKvD,KAAL,CAAWuD,aAAX;AACD;;AAED,cAAI,MAAKlB,WAAT,EAAsB;AACpB,kBAAKA,WAAL,CAAiBC,YAAjB,CAA8B;AAC5BC,cAAAA,OAAO,EAAE,MAAKvC,KAAL,CAAWwC;AADQ,aAA9B;AAGD;;AAEDgB,UAAAA,QAAQ,CAACC,MAAT,CAAgB,MAAK5D,KAAL,CAAWY,GAA3B,EAAgC;AAC9BiD,YAAAA,OAAO,EAAE;AAAEhE,cAAAA,CAAC,EAAE,CAAL;AAAQqD,cAAAA,CAAC,EAAE;AAAX,aADqB;AAE9BY,YAAAA,UAAU,EAAE;AAFkB,WAAhC,EAGGC,KAHH;;AAIA,cAAI,MAAK5D,KAAL,CAAWgC,YAAX,GAA0B,MAAKhC,KAAL,CAAW4C,eAAzC,EAA0D;AACxD,kBAAK5C,KAAL,CAAW+B,QAAX,CAAoB;AAClBgB,cAAAA,CAAC,EAAE,MAAK/C,KAAL,CAAW4C,eADI;AAElBC,cAAAA,QAAQ,EAAE;AAFQ,aAApB;AAID;AACF;AA3HqC,OAApB,CAApB;AA6HD,KAvMkB;;AAAA,UAyMnBK,0BAzMmB,GAyMU,UAAA9B,YAAY,EAAI;AAC3C,cAAQ,MAAKR,uBAAb;AACE,aAAK,IAAL;AACE,iBAAO,CAACQ,YAAY,CAACM,EAArB;;AACF,aAAK,MAAL;AACE,iBAAON,YAAY,CAACM,EAApB;;AACF,aAAK,OAAL;AACE,iBAAON,YAAY,CAACK,EAApB;;AACF,aAAK,MAAL;AACE,iBAAO,CAACL,YAAY,CAACK,EAArB;;AACF;AACE,iBAAO,CAAP;AAVJ;AAYD,KAtNkB;;AAAA,UAwNnBG,mBAxNmB,GAwNG,UAAAR,YAAY,EAAI;AACpC,UAAIG,IAAI,CAACC,GAAL,CAASJ,YAAY,CAACK,EAAtB,IAA4BF,IAAI,CAACC,GAAL,CAASJ,YAAY,CAACM,EAAtB,CAAhC,EAA2D;AACzD,eAAON,YAAY,CAACK,EAAb,GAAkB,CAAlB,GAAsB,OAAtB,GAAgC,MAAvC;AACD;;AAED,aAAOL,YAAY,CAACM,EAAb,GAAkB,CAAlB,GAAsB,MAAtB,GAA+B,IAAtC;AACD,KA9NkB;;AAAA,UAgOnBU,sBAhOmB,GAgOM,UAAAhB,YAAY,EAAI;AACvC,cAAQ,MAAKR,uBAAb;AACE,aAAK,MAAL;AACE,iBACE,CAACQ,YAAY,CAACyC,KAAb,GAAqBzC,YAAY,CAAC0C,EAAnC,KACC,CAAC,MAAK9D,KAAL,CAAWK,YAAX,IAA2B,MAAKR,KAAL,CAAWQ,YAAvC,IACCe,YAAY,CAAC0C,EAFf,CADF;;AAKF,aAAK,IAAL;AACE,iBAAOrE,iBAAiB,CAAC2B,YAAY,CAACyC,KAAb,GAAqBzC,YAAY,CAAC0C,EAAnC,CAAxB;;AACF,aAAK,MAAL;AACE,iBAAOrE,iBAAiB,CAAC2B,YAAY,CAAC2C,KAAb,GAAqB3C,YAAY,CAAC4C,EAAnC,CAAxB;;AACF,aAAK,OAAL;AACE,iBACE,CAAC5C,YAAY,CAAC2C,KAAb,GAAqB3C,YAAY,CAAC4C,EAAnC,KACC,CAAC,MAAKhE,KAAL,CAAWC,WAAX,IAA0B,MAAKJ,KAAL,CAAWI,WAAtC,IAAqDmB,YAAY,CAAC4C,EADnE,CADF;;AAKF;AACE,iBAAO,CAAP;AAlBJ;AAoBD,KArPkB;;AAAA,UAuPnBnC,4BAvPmB,GAuPY,YAAM;AACnC,UACE,MAAKjB,uBAAL,KAAiC,OAAjC,IACA,MAAKA,uBAAL,KAAiC,MAFnC,EAGE;AACA,eAAO4C,QAAQ,CAACS,KAAT,CAAe,CAAC,IAAD,EAAO;AAAExC,UAAAA,EAAE,EAAE,MAAK5B,KAAL,CAAWY,GAAX,CAAef;AAArB,SAAP,CAAf,CAAP;AACD,OALD,MAKO;AACL,eAAO8D,QAAQ,CAACS,KAAT,CAAe,CAAC,IAAD,EAAO;AAAEvC,UAAAA,EAAE,EAAE,MAAK7B,KAAL,CAAWY,GAAX,CAAesC;AAArB,SAAP,CAAf,CAAP;AACD;AACF,KAhQkB;;AAAA,UAkQnBmB,mBAlQmB,GAkQG,UAAAC,SAAS,EAAI;AACjC,aAAOC,KAAK,CAACC,OAAN,CAAc,MAAKrE,KAAL,CAAWQ,cAAzB,IACH,MAAKR,KAAL,CAAWQ,cAAX,CAA0B8D,QAA1B,CAAmCH,SAAnC,CADG,GAEH,MAAKnE,KAAL,CAAWQ,cAAX,KAA8B2D,SAFlC;AAGD,KAtQkB;;AAAA,UAwQnBjC,uBAxQmB,GAwQO,gBAAgB;AAAA,UAAbR,EAAa,QAAbA,EAAa;AAAA,UAATD,EAAS,QAATA,EAAS;AACxC,UAAM8C,WAAW,GAAG7C,EAAE,GAAG,CAAzB;AACA,UAAM8C,SAAS,GAAG9C,EAAE,GAAG,CAAvB;AACA,UAAM+C,WAAW,GAAGhD,EAAE,GAAG,CAAzB;AACA,UAAMiD,YAAY,GAAGjD,EAAE,GAAG,CAA1B;;AAEA,UACE,MAAKb,uBAAL,KAAiC,IAAjC,IACA,MAAKsD,mBAAL,CAAyB,IAAzB,CADA,IAEAM,SAHF,EAIE;AACA,eAAO,IAAP;AACD,OAND,MAMO,IACL,MAAK5D,uBAAL,KAAiC,MAAjC,IACA,MAAKsD,mBAAL,CAAyB,MAAzB,CADA,IAEAK,WAHK,EAIL;AACA,eAAO,IAAP;AACD,OANM,MAMA,IACL,MAAK3D,uBAAL,KAAiC,OAAjC,IACA,MAAKsD,mBAAL,CAAyB,OAAzB,CADA,IAEAQ,YAHK,EAIL;AACA,eAAO,IAAP;AACD,OANM,MAMA,IACL,MAAK9D,uBAAL,KAAiC,MAAjC,IACA,MAAKsD,mBAAL,CAAyB,MAAzB,CADA,IAEAO,WAHK,EAIL;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KAxSkB;;AAAA,UA0SnBE,sBA1SmB,GA0SM,UAAAC,gBAAgB,EAAI;AAC3C,UAAI,CAAC,MAAK5E,KAAL,CAAWK,YAAZ,IAA4B,CAAC,MAAKL,KAAL,CAAWC,WAA5C,EAAyD;AAGvD,YAAMA,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA7C;AACA,YAAMC,YAAY,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA9C;;AACA,YACEL,WAAW,KAAK,MAAKJ,KAAL,CAAWI,WAA3B,IACAI,YAAY,KAAK,MAAKR,KAAL,CAAWQ,YAF9B,EAGE;AACA,gBAAKwE,QAAL,CAAc;AAAE5E,YAAAA,WAAW,EAAXA,WAAF;AAAeI,YAAAA,YAAY,EAAZA;AAAf,WAAd;AACD;AACF;AACF,KAvTkB;;AAAA,UAyTnByE,IAzTmB,GAyTZ,YAAM;AACX,UAAI,MAAKpE,eAAT,EAA0B;AACxB;AACD;;AACD,YAAKA,eAAL,GAAuB,IAAvB;;AACA,UAAI,MAAK2B,WAAT,EAAsB;AACpB,cAAKA,WAAL,CAAiBC,YAAjB,CACE;AAAEC,UAAAA,OAAO,EAAE,MAAKvC,KAAL,CAAWwC;AAAtB,SADF,EAEE,MAAKxC,KAAL,CAAW+E,0BAFb;AAID;;AAKD,UAAI,MAAKlF,KAAL,CAAWU,WAAf,EAA4B;AAC1B,cAAKV,KAAL,CAAWY,GAAX,CAAeuE,QAAf,CAAwB;AAAEtF,UAAAA,CAAC,EAAE,CAAL;AAAQqD,UAAAA,CAAC,EAAE;AAAX,SAAxB;AACD;;AAED,UAAI,MAAKkC,UAAT,EAAqB;AACnB,cAAKjF,KAAL,CAAWkF,eAAX,IAA8B,MAAKlF,KAAL,CAAWkF,eAAX,EAA9B;;AACA,cAAKD,UAAL,CAAgB,MAAKE,WAArB,EAAkC,MAAKnF,KAAL,CAAWoF,iBAA7C,EAAgEC,IAAhE,CACE,YAAM;AACJ,gBAAK3E,eAAL,GAAuB,KAAvB;;AACA,cAAI,CAAC,MAAKV,KAAL,CAAWF,SAAhB,EAA2B;AACzB,kBAAKwF,KAAL;AACD,WAFD,MAEO;AACL,kBAAKtF,KAAL,CAAWuF,WAAX;AACD;AACF,SARH;AAUD;AACF,KAzVkB;;AAAA,UA2VnBD,KA3VmB,GA2VX,YAAM;AACZ,UAAI,MAAK5E,eAAT,EAA0B;AACxB;AACD;;AACD,YAAKA,eAAL,GAAuB,IAAvB;;AACA,UAAI,MAAK2B,WAAT,EAAsB;AACpB,cAAKA,WAAL,CAAiBC,YAAjB,CACE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SADF,EAEE,MAAKvC,KAAL,CAAWwF,2BAFb;AAID;;AAED,UAAIC,YAAY,GAAG,MAAKA,YAAxB;;AAEA,UAAI,MAAK9E,mBAAT,EAA8B;AAC5B,cAAKA,mBAAL,GAA2B,KAA3B;;AACA,YAAI,MAAKC,uBAAL,KAAiC,IAArC,EAA2C;AACzC6E,UAAAA,YAAY,GAAG,YAAf;AACD,SAFD,MAEO,IAAI,MAAK7E,uBAAL,KAAiC,MAArC,EAA6C;AAClD6E,UAAAA,YAAY,GAAG,cAAf;AACD,SAFM,MAEA,IAAI,MAAK7E,uBAAL,KAAiC,OAArC,EAA8C;AACnD6E,UAAAA,YAAY,GAAG,eAAf;AACD,SAFM,MAEA,IAAI,MAAK7E,uBAAL,KAAiC,MAArC,EAA6C;AAClD6E,UAAAA,YAAY,GAAG,cAAf;AACD;AACF;;AAED,UAAI,MAAKR,UAAT,EAAqB;AACnB,cAAKjF,KAAL,CAAW0F,eAAX,IAA8B,MAAK1F,KAAL,CAAW0F,eAAX,EAA9B;;AACA,cAAKT,UAAL,CAAgBQ,YAAhB,EAA8B,MAAKzF,KAAL,CAAW2F,kBAAzC,EAA6DN,IAA7D,CAAkE,YAAM;AACtE,gBAAK3E,eAAL,GAAuB,KAAvB;;AACA,cAAI,MAAKV,KAAL,CAAWF,SAAf,EAA0B;AACxB,kBAAKgF,IAAL;AACD,WAFD,MAEO;AACL,kBAAKD,QAAL,CACE;AACE9E,cAAAA,WAAW,EAAE;AADf,aADF,EAIE,YAAM;AACJ,oBAAK8E,QAAL,CACE;AACE/E,gBAAAA,SAAS,EAAE;AADb,eADF,EAIE,YAAM;AACJ,sBAAKE,KAAL,CAAW4F,WAAX;AACD,eANH;AAQD,aAbH;AAeD;AACF,SArBD;AAsBD;AACF,KA/YkB;;AAAA,2BAEqBrG,eAAe,CAACS,KAAD,CAFpC;AAAA,QAETmF,WAFS,oBAETA,WAFS;AAAA,QAEIM,aAFJ,oBAEIA,YAFJ;;AAGjB,UAAKN,WAAL,GAAmBA,WAAnB;AACA,UAAKM,YAAL,GAAoBA,aAApB;;AACA,QAAI,MAAK5F,KAAL,CAAWU,WAAf,EAA4B;AAC1B,YAAKV,KAAL,qBAAkB,MAAKA,KAAvB;AAA8BY,QAAAA,GAAG,EAAE,IAAI+C,QAAQ,CAACqC,OAAb;AAAnC;;AACA,YAAKhF,iBAAL;AACD;;AACD,QAAI,MAAKb,KAAL,CAAWF,SAAf,EAA0B;AACxB,YAAKD,KAAL,qBACK,MAAKA,KADV;AAEEC,QAAAA,SAAS,EAAE,IAFb;AAGEC,QAAAA,WAAW,EAAE;AAHf;AAKD;;AAfgB;AAgBlB;;;;wCAEmB;AAElB,UAAI,KAAKC,KAAL,CAAWsD,OAAf,EAAwB;AACtBwC,QAAAA,OAAO,CAACC,IAAR,CACE,yFADF;AAGD;;AACDC,MAAAA,kBAAkB,CAACC,WAAnB,CACE,qBADF,EAEE,KAAKtB,sBAFP;;AAIA,UAAI,KAAK9E,KAAL,CAAWC,SAAf,EAA0B;AACxB,aAAKgF,IAAL;AACD;AACF;;;2CAEsB;AACrBkB,MAAAA,kBAAkB,CAACE,cAAnB,CACE,qBADF,EAEE,KAAKvB,sBAFP;AAID;;;uCAEkBwB,S,EAAWC,S,EAAW;AAGvC,UACE,KAAKpG,KAAL,CAAWmF,WAAX,KAA2BgB,SAAS,CAAChB,WAArC,IACA,KAAKnF,KAAL,CAAWyF,YAAX,KAA4BU,SAAS,CAACV,YAFxC,EAGE;AAAA,gCACsClG,eAAe,CAAC,KAAKS,KAAN,CADrD;AAAA,YACQmF,WADR,qBACQA,WADR;AAAA,YACqBM,YADrB,qBACqBA,YADrB;;AAEA,aAAKN,WAAL,GAAmBA,WAAnB;AACA,aAAKM,YAAL,GAAoBA,YAApB;AACD;;AAED,UACE,KAAKzF,KAAL,CAAWwC,eAAX,KAA+B2D,SAAS,CAAC3D,eAAzC,IACA,KAAKH,WAFP,EAGE;AACA,aAAKA,WAAL,CAAiBC,YAAjB,CACE;AAAEC,UAAAA,OAAO,EAAE,KAAKvC,KAAL,CAAWwC;AAAtB,SADF,EAEE,KAAKxC,KAAL,CAAW+E,0BAFb;AAID;;AAED,UAAI,KAAK/E,KAAL,CAAWF,SAAX,IAAwB,CAACqG,SAAS,CAACrG,SAAvC,EAAkD;AAChD,aAAKgF,IAAL;AACD,OAFD,MAEO,IAAI,CAAC,KAAK9E,KAAL,CAAWF,SAAZ,IAAyBqG,SAAS,CAACrG,SAAvC,EAAkD;AAEvD,aAAKwF,KAAL;AACD;AACF;;;6BA4UQ;AAAA;;AAAA,wBAyBH,KAAKtF,KAzBF;AAAA,UAELmF,WAFK,eAELA,WAFK;AAAA,UAGLC,iBAHK,eAGLA,iBAHK;AAAA,UAILK,YAJK,eAILA,YAJK;AAAA,UAKLE,kBALK,eAKLA,kBALK;AAAA,UAMLU,aANK,eAMLA,aANK;AAAA,UAOLC,WAPK,eAOLA,WAPK;AAAA,UAQLC,WARK,eAQLA,WARK;AAAA,UASLC,aATK,eASLA,aATK;AAAA,UAULhE,eAVK,eAULA,eAVK;AAAA,UAWLuC,0BAXK,eAWLA,0BAXK;AAAA,UAYLS,2BAZK,eAYLA,2BAZK;AAAA,UAaLiB,cAbK,eAaLA,cAbK;AAAA,UAcLC,QAdK,eAcLA,QAdK;AAAA,UAeSC,gBAfT,eAeLtG,YAfK;AAAA,UAgBQuG,eAhBR,eAgBL3G,WAhBK;AAAA,UAiBLH,SAjBK,eAiBLA,SAjBK;AAAA,UAkBLyF,WAlBK,eAkBLA,WAlBK;AAAA,UAmBLsB,eAnBK,eAmBLA,eAnBK;AAAA,UAoBLC,iBApBK,eAoBLA,iBApBK;AAAA,UAqBLC,eArBK,eAqBLA,eArBK;AAAA,UAsBL1F,cAtBK,eAsBLA,cAtBK;AAAA,UAuBL2F,KAvBK,eAuBLA,KAvBK;AAAA,UAwBFC,UAxBE;;AA0BP,UAAMhH,WAAW,GAAG2G,eAAe,IAAI,KAAK/G,KAAL,CAAWI,WAAlD;AACA,UAAMI,YAAY,GAAGsG,gBAAgB,IAAI,KAAK9G,KAAL,CAAWQ,YAApD;AAEA,UAAM6G,aAAa,GAAG,CACpB;AAAEC,QAAAA,MAAM,EAAElH,WAAW,GAAG,IAAxB;AAA8BmH,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAD;AAAzC,OADoB,EAEpB7H,MAAM,CAAC8H,OAFa,EAGpBN,KAHoB,CAAtB;AAMA,UAAIO,WAAW,GAAG,EAAlB;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,UAAI,KAAK3H,KAAL,CAAWU,WAAf,EAA4B;AAC1BgH,QAAAA,WAAW,qBAAQ,KAAKxG,YAAL,CAAkBwG,WAA1B,CAAX;;AAEA,YAAIR,eAAJ,EAAqB;AACnBS,UAAAA,WAAW,GAAG;AACZJ,YAAAA,SAAS,EAAE,KAAKvH,KAAL,CAAWY,GAAX,CAAegH,qBAAf;AADC,WAAd;AAGD,SAJD,MAIO;AACLD,UAAAA,WAAW,GAAG,KAAK3H,KAAL,CAAWY,GAAX,CAAeiH,SAAf,EAAd;AACD;AACF;;AAED,UAAMC,SAAS,GACb,KAAK3H,KAAL,CAAW4H,8BAAX,IACA,KAAK5H,KAAL,CAAW+G,eADX,IAEA,CAAC,KAAKlH,KAAL,CAAWE,WAFZ,GAGE,oBAAC,UAAD,CAAY,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,GAKE2G,QANJ;;AAQA,UAAMmB,aAAa,GACjB,oBAAC,UAAD,CAAY,IAAZ,eACMN,WADN;AAEE,QAAA,GAAG,EAAE,aAAAO,KAAG;AAAA,iBAAK,MAAI,CAAC7C,UAAL,GAAkB6C,KAAvB;AAAA,SAFV;AAGE,QAAA,KAAK,EAAE,CAACN,WAAD,EAAcN,aAAd,CAHT;AAIE,QAAA,aAAa,EAAC,UAJhB;AAKE,QAAA,eAAe,EAAEH;AALnB,SAMME,UANN;AAAA;AAAA;AAAA;AAAA;AAAA,UAQGU,SARH,CADF;AAaA,UAAMI,iBAAiB,GAAG7I,KAAK,CAAC8I,cAAN,CAAqBvB,cAArB,CAA1B;AAEA,UAAMwB,eAAe,GACnB,oBAAC,UAAD,CAAY,IAAZ;AACE,QAAA,GAAG,EAAE,aAAAH,KAAG;AAAA,iBAAK,MAAI,CAACzF,WAAL,GAAmByF,KAAxB;AAAA,SADV;AAEE,QAAA,eAAe,EAAEf,eAFnB;AAGE,QAAA,KAAK,EAAE,CACLvH,MAAM,CAAC0I,QADF,EAEL;AACE9H,UAAAA,KAAK,EAAEH,WADT;AAEEK,UAAAA,MAAM,EAAED,YAFV;AAGE8H,UAAAA,eAAe,EACb,KAAKtI,KAAL,CAAWE,WAAX,IAA0B,CAACgI,iBAA3B,GACIvB,aADJ,GAEI;AANR,SAFK,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA,SAeGuB,iBAAiB,IAAItB,cAfxB,CADF;AAoBA,UAAIyB,QAAQ,GAAG,IAAf;;AACA,UAAIH,iBAAJ,EAAuB;AACrBG,QAAAA,QAAQ,GAAGD,eAAX;AACD,OAFD,MAEO;AAGLC,QAAAA,QAAQ,GACN,oBAAC,wBAAD;AAA0B,UAAA,OAAO,EAAErB,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,WACGoB,eADH,CADF;AAKD;;AAED,UAAI,CAAC3B,WAAD,IAAgB,KAAKzG,KAAL,CAAWC,SAA/B,EAA0C;AACxC,eACE,oBAAC,IAAD;AACE,UAAA,aAAa,EAAC,UADhB;AAEE,UAAA,KAAK,EAAE,CACLN,MAAM,CAAC0I,QADF,EAEL;AAAEE,YAAAA,MAAM,EAAE,CAAV;AAAa7F,YAAAA,OAAO,EAAE,CAAtB;AAAyB4F,YAAAA,eAAe,EAAE;AAA1C,WAFK,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA,WAOG5B,WAAW,IAAI2B,QAPlB,EAQGL,aARH,CADF;AAYD;;AAED,aACE,oBAAC,KAAD;AACE,QAAA,WAAW,EAAE,IADf;AAEE,QAAA,aAAa,EAAE,MAFjB;AAGE,QAAA,OAAO,EAAE,KAAKhI,KAAL,CAAWC,SAHtB;AAIE,QAAA,cAAc,EAAEgH;AAJlB,SAKMG,UALN;AAAA;AAAA;AAAA;AAAA;AAAA,UAOGV,WAAW,IAAI2B,QAPlB,EASG7B,aAAa,IACZ,oBAAC,oBAAD;AACE,QAAA,QAAQ,EAAEgC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC,IADhD;AAEE,QAAA,aAAa,EAAC,UAFhB;AAGE,QAAA,KAAK,EAAEpB,aAAa,CAACqB,MAAd,CAAqB,CAAC;AAAEpB,UAAAA,MAAM,EAAE;AAAV,SAAD,CAArB,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA,SAKGU,aALH,CAVJ,EAmBG,CAACxB,aAAD,IAAkBwB,aAnBrB,CADF;AAuBD;;;;EA9oB4B1I,S;;AAAzBQ,gB,CACG6I,S,GAAY;AACjBrD,EAAAA,WAAW,EAAE/F,SAAS,CAACqJ,SAAV,CAAoB,CAACrJ,SAAS,CAACsJ,MAAX,EAAmBtJ,SAAS,CAACuJ,MAA7B,CAApB,CADI;AAEjBvD,EAAAA,iBAAiB,EAAEhG,SAAS,CAACwJ,MAFZ;AAGjBnD,EAAAA,YAAY,EAAErG,SAAS,CAACqJ,SAAV,CAAoB,CAACrJ,SAAS,CAACsJ,MAAX,EAAmBtJ,SAAS,CAACuJ,MAA7B,CAApB,CAHG;AAIjBhD,EAAAA,kBAAkB,EAAEvG,SAAS,CAACwJ,MAJb;AAKjBvC,EAAAA,aAAa,EAAEjH,SAAS,CAACyJ,IALR;AAMjBvC,EAAAA,WAAW,EAAElH,SAAS,CAACyJ,IANN;AAOjBtC,EAAAA,WAAW,EAAEnH,SAAS,CAACyJ,IAPN;AAQjBrC,EAAAA,aAAa,EAAEpH,SAAS,CAACsJ,MARR;AASjBlG,EAAAA,eAAe,EAAEpD,SAAS,CAACwJ,MATV;AAUjB7D,EAAAA,0BAA0B,EAAE3F,SAAS,CAACwJ,MAVrB;AAWjBpD,EAAAA,2BAA2B,EAAEpG,SAAS,CAACwJ,MAXtB;AAYjBnC,EAAAA,cAAc,EAAErH,SAAS,CAAC0J,IAZT;AAajBpC,EAAAA,QAAQ,EAAEtH,SAAS,CAAC0J,IAAV,CAAeC,UAbR;AAcjB1I,EAAAA,YAAY,EAAEjB,SAAS,CAACwJ,MAdP;AAejB3I,EAAAA,WAAW,EAAEb,SAAS,CAACwJ,MAfN;AAgBjB9I,EAAAA,SAAS,EAAEV,SAAS,CAACyJ,IAAV,CAAeE,UAhBT;AAiBjBnB,EAAAA,8BAA8B,EAAExI,SAAS,CAACyJ,IAjBzB;AAkBjBxH,EAAAA,cAAc,EAAEjC,SAAS,CAACyJ,IAlBT;AAmBjBtD,EAAAA,WAAW,EAAEnG,SAAS,CAAC4J,IAnBN;AAoBjB9D,EAAAA,eAAe,EAAE9F,SAAS,CAAC4J,IApBV;AAqBjBpD,EAAAA,WAAW,EAAExG,SAAS,CAAC4J,IArBN;AAsBjBtD,EAAAA,eAAe,EAAEtG,SAAS,CAAC4J,IAtBV;AAuBjBlC,EAAAA,iBAAiB,EAAE1H,SAAS,CAAC4J,IAvBZ;AAwBjBnC,EAAAA,eAAe,EAAEzH,SAAS,CAAC4J,IAxBV;AAyBjBrH,EAAAA,YAAY,EAAEvC,SAAS,CAAC4J,IAzBP;AA0BjBvG,EAAAA,WAAW,EAAErD,SAAS,CAAC4J,IA1BN;AA2BjB5F,EAAAA,eAAe,EAAEhE,SAAS,CAAC4J,IA3BV;AA4BjBzF,EAAAA,aAAa,EAAEnE,SAAS,CAAC4J,IA5BR;AA6BjB7F,EAAAA,cAAc,EAAE/D,SAAS,CAACwJ,MA7BT;AA8BjBpI,EAAAA,cAAc,EAAEpB,SAAS,CAACqJ,SAAV,CAAoB,CAClCrJ,SAAS,CAAC6J,OAAV,CAAkB7J,SAAS,CAAC8J,KAAV,CAAgB,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAuB,OAAvB,CAAhB,CAAlB,CADkC,EAElC9J,SAAS,CAAC8J,KAAV,CAAgB,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAuB,OAAvB,CAAhB,CAFkC,CAApB,CA9BC;AAkCjBnC,EAAAA,eAAe,EAAE3H,SAAS,CAACyJ,IAlCV;AAmCjB7B,EAAAA,KAAK,EAAE5H,SAAS,CAAC+J,GAnCA;AAoCjBpH,EAAAA,QAAQ,EAAE3C,SAAS,CAAC4J,IApCH;AAqCjBhH,EAAAA,YAAY,EAAE5C,SAAS,CAACwJ,MArCP;AAsCjBhG,EAAAA,eAAe,EAAExD,SAAS,CAACwJ,MAtCV;AAuCjBlG,EAAAA,gBAAgB,EAAEtD,SAAS,CAACyJ,IAvCX;AAwCjBO,EAAAA,qBAAqB,EAAEhK,SAAS,CAAC6J,OAAV,CACrB7J,SAAS,CAAC8J,KAAV,CAAgB,CACd,UADc,EAEd,sBAFc,EAGd,WAHc,EAId,gBAJc,EAKd,iBALc,CAAhB,CADqB;AAxCN,C;AADfvJ,gB,CAoDG0J,Y,GAAe;AACpBlE,EAAAA,WAAW,EAAE,WADO;AAEpBC,EAAAA,iBAAiB,EAAE,GAFC;AAGpBK,EAAAA,YAAY,EAAE,cAHM;AAIpBE,EAAAA,kBAAkB,EAAE,GAJA;AAKpBU,EAAAA,aAAa,EAAE,KALK;AAMpBC,EAAAA,WAAW,EAAE,IANO;AAOpBC,EAAAA,WAAW,EAAE,IAPO;AAQpBC,EAAAA,aAAa,EAAE,OARK;AASpBhE,EAAAA,eAAe,EAAE,GATG;AAUpBuC,EAAAA,0BAA0B,EAAE,GAVR;AAWpBS,EAAAA,2BAA2B,EAAE,GAXT;AAYpBiB,EAAAA,cAAc,EAAE,IAZI;AAapBlB,EAAAA,WAAW,EAAE;AAAA,WAAM,IAAN;AAAA,GAbO;AAcpBL,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAdG;AAepB7E,EAAAA,YAAY,EAAE,IAfM;AAgBpBJ,EAAAA,WAAW,EAAE,IAhBO;AAiBpB2F,EAAAA,WAAW,EAAE;AAAA,WAAM,IAAN;AAAA,GAjBO;AAkBpBF,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAlBG;AAmBpB5F,EAAAA,SAAS,EAAE,KAnBS;AAoBpB8H,EAAAA,8BAA8B,EAAE,KApBZ;AAqBpBvG,EAAAA,cAAc,EAAEjC,SAAS,CAACkK,KArBN;AAsBpBzC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAtBG;AAuBpBC,EAAAA,iBAAiB,EAAE;AAAA,WAAM,IAAN;AAAA,GAvBC;AAwBpB3D,EAAAA,cAAc,EAAE,GAxBI;AAyBpB4D,EAAAA,eAAe,EAAE,KAzBG;AA0BpBhF,EAAAA,QAAQ,EAAE,IA1BU;AA2BpBC,EAAAA,YAAY,EAAE,CA3BM;AA4BpBY,EAAAA,eAAe,EAAE,CA5BG;AA6BpBF,EAAAA,gBAAgB,EAAE,KA7BE;AA8BpB0G,EAAAA,qBAAqB,EAAE,CAAC,UAAD,EAAa,WAAb;AA9BH,C;AA6lBxB,eAAezJ,gBAAf;AACA,SAASA,gBAAT","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Animated,\n  DeviceEventEmitter,\n  Dimensions,\n  KeyboardAvoidingView,\n  Modal,\n  PanResponder,\n  Platform,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport * as animatable from 'react-native-animatable';\nimport { initializeAnimations, buildAnimations } from './utils';\n\nimport styles from './index.style.js';\n\n// Override default react-native-animatable animations\ninitializeAnimations();\n\nconst reversePercentage = x => -(x - 1);\n\nclass ReactNativeModal extends Component {\n  static propTypes = {\n    animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationInTiming: PropTypes.number,\n    animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationOutTiming: PropTypes.number,\n    avoidKeyboard: PropTypes.bool,\n    coverScreen: PropTypes.bool,\n    hasBackdrop: PropTypes.bool,\n    backdropColor: PropTypes.string,\n    backdropOpacity: PropTypes.number,\n    backdropTransitionInTiming: PropTypes.number,\n    backdropTransitionOutTiming: PropTypes.number,\n    customBackdrop: PropTypes.node,\n    children: PropTypes.node.isRequired,\n    deviceHeight: PropTypes.number,\n    deviceWidth: PropTypes.number,\n    isVisible: PropTypes.bool.isRequired,\n    hideModalContentWhileAnimating: PropTypes.bool,\n    propagateSwipe: PropTypes.bool,\n    onModalShow: PropTypes.func,\n    onModalWillShow: PropTypes.func,\n    onModalHide: PropTypes.func,\n    onModalWillHide: PropTypes.func,\n    onBackButtonPress: PropTypes.func,\n    onBackdropPress: PropTypes.func,\n    onSwipeStart: PropTypes.func,\n    onSwipeMove: PropTypes.func,\n    onSwipeComplete: PropTypes.func,\n    onSwipeCancel: PropTypes.func,\n    swipeThreshold: PropTypes.number,\n    swipeDirection: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.oneOf(['up', 'down', 'left', 'right'])),\n      PropTypes.oneOf(['up', 'down', 'left', 'right']),\n    ]),\n    useNativeDriver: PropTypes.bool,\n    style: PropTypes.any,\n    scrollTo: PropTypes.func,\n    scrollOffset: PropTypes.number,\n    scrollOffsetMax: PropTypes.number,\n    scrollHorizontal: PropTypes.bool,\n    supportedOrientations: PropTypes.arrayOf(\n      PropTypes.oneOf([\n        'portrait',\n        'portrait-upside-down',\n        'landscape',\n        'landscape-left',\n        'landscape-right',\n      ])\n    ),\n  };\n\n  static defaultProps = {\n    animationIn: 'slideInUp',\n    animationInTiming: 300,\n    animationOut: 'slideOutDown',\n    animationOutTiming: 300,\n    avoidKeyboard: false,\n    coverScreen: true,\n    hasBackdrop: true,\n    backdropColor: 'black',\n    backdropOpacity: 0.7,\n    backdropTransitionInTiming: 300,\n    backdropTransitionOutTiming: 300,\n    customBackdrop: null,\n    onModalShow: () => null,\n    onModalWillShow: () => null,\n    deviceHeight: null,\n    deviceWidth: null,\n    onModalHide: () => null,\n    onModalWillHide: () => null,\n    isVisible: false,\n    hideModalContentWhileAnimating: false,\n    propagateSwipe: PropTypes.false,\n    onBackdropPress: () => null,\n    onBackButtonPress: () => null,\n    swipeThreshold: 100,\n    useNativeDriver: false,\n    scrollTo: null,\n    scrollOffset: 0,\n    scrollOffsetMax: 0,\n    scrollHorizontal: false,\n    supportedOrientations: ['portrait', 'landscape'],\n  };\n\n  static getDerivedStateFromProps(nextProps, state) {\n    if (!state.isVisible && nextProps.isVisible) {\n      return { isVisible: true, showContent: true };\n    }\n    return null;\n  }\n\n  // We use an internal state for keeping track of the modal visibility: this allows us to keep\n  // the modal visible during the exit animation, even if the user has already change the\n  // isVisible prop to false.\n  // We store in the state the device width and height so that we can update the modal on\n  // device rotation.\n  state = {\n    showContent: true,\n    isVisible: false,\n    deviceWidth: Dimensions.get('window').width,\n    deviceHeight: Dimensions.get('window').height,\n    isSwipeable: this.props.swipeDirection ? true : false,\n    pan: null,\n  };\n\n  isTransitioning = false;\n  inSwipeClosingState = false;\n  currentSwipingDirection = null;\n\n  constructor(props) {\n    super(props);\n    const { animationIn, animationOut } = buildAnimations(props);\n    this.animationIn = animationIn;\n    this.animationOut = animationOut;\n    if (this.state.isSwipeable) {\n      this.state = { ...this.state, pan: new Animated.ValueXY() };\n      this.buildPanResponder();\n    }\n    if (this.props.isVisible) {\n      this.state = {\n        ...this.state,\n        isVisible: true,\n        showContent: true,\n      };\n    }\n  }\n\n  componentDidMount() {\n    // Show deprecation message\n    if (this.props.onSwipe) {\n      console.warn(\n        '`<Modal onSwipe=\"...\" />` is deprecated. Use `<Modal onSwipeComplete=\"...\" />` instead.'\n      );\n    }\n    DeviceEventEmitter.addListener(\n      'didUpdateDimensions',\n      this.handleDimensionsUpdate\n    );\n    if (this.state.isVisible) {\n      this.open();\n    }\n  }\n\n  componentWillUnmount() {\n    DeviceEventEmitter.removeListener(\n      'didUpdateDimensions',\n      this.handleDimensionsUpdate\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // If the animations have been changed then rebuild them to make sure we're\n    // using the most up-to-date ones\n    if (\n      this.props.animationIn !== prevProps.animationIn ||\n      this.props.animationOut !== prevProps.animationOut\n    ) {\n      const { animationIn, animationOut } = buildAnimations(this.props);\n      this.animationIn = animationIn;\n      this.animationOut = animationOut;\n    }\n    // If backdrop opacity has been changed then make sure to update it\n    if (\n      this.props.backdropOpacity !== prevProps.backdropOpacity &&\n      this.backdropRef\n    ) {\n      this.backdropRef.transitionTo(\n        { opacity: this.props.backdropOpacity },\n        this.props.backdropTransitionInTiming\n      );\n    }\n    // On modal open request, we slide the view up and fade in the backdrop\n    if (this.props.isVisible && !prevProps.isVisible) {\n      this.open();\n    } else if (!this.props.isVisible && prevProps.isVisible) {\n      // On modal close request, we slide the view down and fade out the backdrop\n      this.close();\n    }\n  }\n\n  buildPanResponder = () => {\n    let animEvt = null;\n\n    this.panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: (evt, gestureState) => {\n        // Use propagateSwipe to allow inner content to scroll. See PR:\n        // https://github.com/react-native-community/react-native-modal/pull/246\n        if (!this.props.propagateSwipe) {\n          // The number \"4\" is just a good tradeoff to make the panResponder\n          // work correctly even when the modal has touchable buttons.\n          // For reference:\n          // https://github.com/react-native-community/react-native-modal/pull/197\n          const shouldSetPanResponder =\n            Math.abs(gestureState.dx) >= 4 || Math.abs(gestureState.dy) >= 4;\n          if (shouldSetPanResponder && this.props.onSwipeStart) {\n            this.props.onSwipeStart();\n          }\n\n          this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n          animEvt = this.createAnimationEventForSwipe();\n          return shouldSetPanResponder;\n        }\n      },\n      onStartShouldSetPanResponder: () => {\n        if (this.props.scrollTo && this.props.scrollOffset > 0) {\n          return false; // user needs to be able to scroll content back up\n        }\n        if (this.props.onSwipeStart) {\n          this.props.onSwipeStart();\n        }\n\n        // Cleared so that onPanResponderMove can wait to have some delta\n        // to work with\n        this.currentSwipingDirection = null;\n        return true;\n      },\n      onPanResponderMove: (evt, gestureState) => {\n        // Using onStartShouldSetPanResponder we don't have any delta so we don't know\n        // The direction to which the user is swiping until some move have been done\n        if (!this.currentSwipingDirection) {\n          if (gestureState.dx === 0 && gestureState.dy === 0) {\n            return;\n          }\n\n          this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n          animEvt = this.createAnimationEventForSwipe();\n        }\n\n        if (this.isSwipeDirectionAllowed(gestureState)) {\n          // Dim the background while swiping the modal\n          const newOpacityFactor =\n            1 - this.calcDistancePercentage(gestureState);\n\n          this.backdropRef &&\n            this.backdropRef.transitionTo({\n              opacity: this.props.backdropOpacity * newOpacityFactor,\n            });\n\n          animEvt(evt, gestureState);\n\n          if (this.props.onSwipeMove) {\n            this.props.onSwipeMove(newOpacityFactor);\n          }\n        } else {\n          if (this.props.scrollTo) {\n            if (this.props.scrollHorizontal) {\n              let offsetX = -gestureState.dx;\n              if (offsetX > this.props.scrollOffsetMax) {\n                offsetX -= (offsetX - this.props.scrollOffsetMax) / 2;\n              }\n\n              this.props.scrollTo({ x: offsetX, animated: false });\n            } else {\n              let offsetY = -gestureState.dy;\n              if (offsetY > this.props.scrollOffsetMax) {\n                offsetY -= (offsetY - this.props.scrollOffsetMax) / 2;\n              }\n\n              this.props.scrollTo({ y: offsetY, animated: false });\n            }\n          }\n        }\n      },\n      onPanResponderRelease: (evt, gestureState) => {\n        // Call the onSwipe prop if the threshold has been exceeded on the right direction\n        const accDistance = this.getAccDistancePerDirection(gestureState);\n        if (\n          accDistance > this.props.swipeThreshold &&\n          this.isSwipeDirectionAllowed(gestureState)\n        ) {\n          if (this.props.onSwipeComplete) {\n            this.inSwipeClosingState = true;\n            this.props.onSwipeComplete({\n              swipingDirection: this.getSwipingDirection(gestureState),\n            });\n            return;\n          }\n          // Deprecated. Remove later.\n          if (this.props.onSwipe) {\n            this.inSwipeClosingState = true;\n            this.props.onSwipe();\n            return;\n          }\n        }\n\n        //Reset backdrop opacity and modal position\n        if (this.props.onSwipeCancel) {\n          this.props.onSwipeCancel();\n        }\n\n        if (this.backdropRef) {\n          this.backdropRef.transitionTo({\n            opacity: this.props.backdropOpacity,\n          });\n        }\n\n        Animated.spring(this.state.pan, {\n          toValue: { x: 0, y: 0 },\n          bounciness: 0,\n        }).start();\n        if (this.props.scrollOffset > this.props.scrollOffsetMax) {\n          this.props.scrollTo({\n            y: this.props.scrollOffsetMax,\n            animated: true,\n          });\n        }\n      },\n    });\n  };\n\n  getAccDistancePerDirection = gestureState => {\n    switch (this.currentSwipingDirection) {\n      case 'up':\n        return -gestureState.dy;\n      case 'down':\n        return gestureState.dy;\n      case 'right':\n        return gestureState.dx;\n      case 'left':\n        return -gestureState.dx;\n      default:\n        return 0;\n    }\n  };\n\n  getSwipingDirection = gestureState => {\n    if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n      return gestureState.dx > 0 ? 'right' : 'left';\n    }\n\n    return gestureState.dy > 0 ? 'down' : 'up';\n  };\n\n  calcDistancePercentage = gestureState => {\n    switch (this.currentSwipingDirection) {\n      case 'down':\n        return (\n          (gestureState.moveY - gestureState.y0) /\n          ((this.props.deviceHeight || this.state.deviceHeight) -\n            gestureState.y0)\n        );\n      case 'up':\n        return reversePercentage(gestureState.moveY / gestureState.y0);\n      case 'left':\n        return reversePercentage(gestureState.moveX / gestureState.x0);\n      case 'right':\n        return (\n          (gestureState.moveX - gestureState.x0) /\n          ((this.props.deviceWidth || this.state.deviceWidth) - gestureState.x0)\n        );\n\n      default:\n        return 0;\n    }\n  };\n\n  createAnimationEventForSwipe = () => {\n    if (\n      this.currentSwipingDirection === 'right' ||\n      this.currentSwipingDirection === 'left'\n    ) {\n      return Animated.event([null, { dx: this.state.pan.x }]);\n    } else {\n      return Animated.event([null, { dy: this.state.pan.y }]);\n    }\n  };\n\n  isDirectionIncluded = direction => {\n    return Array.isArray(this.props.swipeDirection)\n      ? this.props.swipeDirection.includes(direction)\n      : this.props.swipeDirection === direction;\n  };\n\n  isSwipeDirectionAllowed = ({ dy, dx }) => {\n    const draggedDown = dy > 0;\n    const draggedUp = dy < 0;\n    const draggedLeft = dx < 0;\n    const draggedRight = dx > 0;\n\n    if (\n      this.currentSwipingDirection === 'up' &&\n      this.isDirectionIncluded('up') &&\n      draggedUp\n    ) {\n      return true;\n    } else if (\n      this.currentSwipingDirection === 'down' &&\n      this.isDirectionIncluded('down') &&\n      draggedDown\n    ) {\n      return true;\n    } else if (\n      this.currentSwipingDirection === 'right' &&\n      this.isDirectionIncluded('right') &&\n      draggedRight\n    ) {\n      return true;\n    } else if (\n      this.currentSwipingDirection === 'left' &&\n      this.isDirectionIncluded('left') &&\n      draggedLeft\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  handleDimensionsUpdate = dimensionsUpdate => {\n    if (!this.props.deviceHeight && !this.props.deviceWidth) {\n      // Here we update the device dimensions in the state if the layout changed\n      // (triggering a render)\n      const deviceWidth = Dimensions.get('window').width;\n      const deviceHeight = Dimensions.get('window').height;\n      if (\n        deviceWidth !== this.state.deviceWidth ||\n        deviceHeight !== this.state.deviceHeight\n      ) {\n        this.setState({ deviceWidth, deviceHeight });\n      }\n    }\n  };\n\n  open = () => {\n    if (this.isTransitioning) {\n      return;\n    }\n    this.isTransitioning = true;\n    if (this.backdropRef) {\n      this.backdropRef.transitionTo(\n        { opacity: this.props.backdropOpacity },\n        this.props.backdropTransitionInTiming\n      );\n    }\n\n    // This is for resetting the pan position,otherwise the modal gets stuck\n    // at the last released position when you try to open it.\n    // TODO: Could certainly be improved - no idea for the moment.\n    if (this.state.isSwipeable) {\n      this.state.pan.setValue({ x: 0, y: 0 });\n    }\n\n    if (this.contentRef) {\n      this.props.onModalWillShow && this.props.onModalWillShow();\n      this.contentRef[this.animationIn](this.props.animationInTiming).then(\n        () => {\n          this.isTransitioning = false;\n          if (!this.props.isVisible) {\n            this.close();\n          } else {\n            this.props.onModalShow();\n          }\n        }\n      );\n    }\n  };\n\n  close = () => {\n    if (this.isTransitioning) {\n      return;\n    }\n    this.isTransitioning = true;\n    if (this.backdropRef) {\n      this.backdropRef.transitionTo(\n        { opacity: 0 },\n        this.props.backdropTransitionOutTiming\n      );\n    }\n\n    let animationOut = this.animationOut;\n\n    if (this.inSwipeClosingState) {\n      this.inSwipeClosingState = false;\n      if (this.currentSwipingDirection === 'up') {\n        animationOut = 'slideOutUp';\n      } else if (this.currentSwipingDirection === 'down') {\n        animationOut = 'slideOutDown';\n      } else if (this.currentSwipingDirection === 'right') {\n        animationOut = 'slideOutRight';\n      } else if (this.currentSwipingDirection === 'left') {\n        animationOut = 'slideOutLeft';\n      }\n    }\n\n    if (this.contentRef) {\n      this.props.onModalWillHide && this.props.onModalWillHide();\n      this.contentRef[animationOut](this.props.animationOutTiming).then(() => {\n        this.isTransitioning = false;\n        if (this.props.isVisible) {\n          this.open();\n        } else {\n          this.setState(\n            {\n              showContent: false,\n            },\n            () => {\n              this.setState(\n                {\n                  isVisible: false,\n                },\n                () => {\n                  this.props.onModalHide();\n                }\n              );\n            }\n          );\n        }\n      });\n    }\n  };\n\n  render() {\n    const {\n      animationIn,\n      animationInTiming,\n      animationOut,\n      animationOutTiming,\n      avoidKeyboard,\n      coverScreen,\n      hasBackdrop,\n      backdropColor,\n      backdropOpacity,\n      backdropTransitionInTiming,\n      backdropTransitionOutTiming,\n      customBackdrop,\n      children,\n      deviceHeight: deviceHeightProp,\n      deviceWidth: deviceWidthProp,\n      isVisible,\n      onModalShow,\n      onBackdropPress,\n      onBackButtonPress,\n      useNativeDriver,\n      propagateSwipe,\n      style,\n      ...otherProps\n    } = this.props;\n    const deviceWidth = deviceWidthProp || this.state.deviceWidth;\n    const deviceHeight = deviceHeightProp || this.state.deviceHeight;\n\n    const computedStyle = [\n      { margin: deviceWidth * 0.05, transform: [{ translateY: 0 }] },\n      styles.content,\n      style,\n    ];\n\n    let panHandlers = {};\n    let panPosition = {};\n    if (this.state.isSwipeable) {\n      panHandlers = { ...this.panResponder.panHandlers };\n\n      if (useNativeDriver) {\n        panPosition = {\n          transform: this.state.pan.getTranslateTransform(),\n        };\n      } else {\n        panPosition = this.state.pan.getLayout();\n      }\n    }\n\n    const _children =\n      this.props.hideModalContentWhileAnimating &&\n      this.props.useNativeDriver &&\n      !this.state.showContent ? (\n        <animatable.View />\n      ) : (\n        children\n      );\n    const containerView = (\n      <animatable.View\n        {...panHandlers}\n        ref={ref => (this.contentRef = ref)}\n        style={[panPosition, computedStyle]}\n        pointerEvents=\"box-none\"\n        useNativeDriver={useNativeDriver}\n        {...otherProps}\n      >\n        {_children}\n      </animatable.View>\n    );\n\n    const hasCustomBackdrop = React.isValidElement(customBackdrop);\n\n    const backdropContent = (\n      <animatable.View\n        ref={ref => (this.backdropRef = ref)}\n        useNativeDriver={useNativeDriver}\n        style={[\n          styles.backdrop,\n          {\n            width: deviceWidth,\n            height: deviceHeight,\n            backgroundColor:\n              this.state.showContent && !hasCustomBackdrop\n                ? backdropColor\n                : 'transparent',\n          },\n        ]}\n      >\n        {hasCustomBackdrop && customBackdrop}\n      </animatable.View>\n    );\n\n    let backdrop = null;\n    if (hasCustomBackdrop) {\n      backdrop = backdropContent;\n    } else {\n      // If there's no custom backdrop, handle presses with\n      // TouchableWithoutFeedback\n      backdrop = (\n        <TouchableWithoutFeedback onPress={onBackdropPress}>\n          {backdropContent}\n        </TouchableWithoutFeedback>\n      );\n    }\n\n    if (!coverScreen && this.state.isVisible) {\n      return (\n        <View\n          pointerEvents=\"box-none\"\n          style={[\n            styles.backdrop,\n            { zIndex: 2, opacity: 1, backgroundColor: 'transparent' },\n          ]}\n        >\n          {hasBackdrop && backdrop}\n          {containerView}\n        </View>\n      );\n    }\n\n    return (\n      <Modal\n        transparent={true}\n        animationType={'none'}\n        visible={this.state.isVisible}\n        onRequestClose={onBackButtonPress}\n        {...otherProps}\n      >\n        {hasBackdrop && backdrop}\n\n        {avoidKeyboard && (\n          <KeyboardAvoidingView\n            behavior={Platform.OS === 'ios' ? 'padding' : null}\n            pointerEvents=\"box-none\"\n            style={computedStyle.concat([{ margin: 0 }])}\n          >\n            {containerView}\n          </KeyboardAvoidingView>\n        )}\n\n        {!avoidKeyboard && containerView}\n      </Modal>\n    );\n  }\n}\n\nexport default ReactNativeModal;\nexport { ReactNativeModal };\n"]},"metadata":{},"sourceType":"module"}