{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/drawer/src/views/DrawerNavigatorItems.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from \"./TouchableItem\";\n\nvar DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {\n  var items = _ref.items,\n      activeItemKey = _ref.activeItemKey,\n      activeTintColor = _ref.activeTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      getLabel = _ref.getLabel,\n      renderIcon = _ref.renderIcon,\n      onItemPress = _ref.onItemPress,\n      itemsContainerStyle = _ref.itemsContainerStyle,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle,\n      activeLabelStyle = _ref.activeLabelStyle,\n      inactiveLabelStyle = _ref.inactiveLabelStyle,\n      iconContainerStyle = _ref.iconContainerStyle,\n      drawerPosition = _ref.drawerPosition;\n  return React.createElement(View, {\n    style: [styles.container, itemsContainerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    }\n  }, items.map(function (route, index) {\n    var _ref2;\n\n    var focused = activeItemKey === route.key;\n    var color = focused ? activeTintColor : inactiveTintColor;\n    var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    var scene = {\n      route: route,\n      index: index,\n      focused: focused,\n      tintColor: color\n    };\n    var icon = renderIcon(scene);\n    var label = getLabel(scene);\n    var accessibilityLabel = typeof label === 'string' ? label : undefined;\n    var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return React.createElement(TouchableItem, {\n      key: route.key,\n      accessible: true,\n      accessibilityLabel: accessibilityLabel,\n      onPress: function onPress() {\n        onItemPress({\n          route: route,\n          focused: focused\n        });\n      },\n      delayPressIn: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      }\n    }, React.createElement(SafeAreaView, {\n      style: [{\n        backgroundColor: backgroundColor\n      }, styles.item, itemStyle],\n      forceInset: (_ref2 = {}, _defineProperty(_ref2, drawerPosition, 'always'), _defineProperty(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty(_ref2, \"vertical\", 'never'), _ref2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      }\n    }, icon ? React.createElement(View, {\n      style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      }\n    }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n      style: [styles.label, {\n        color: color\n      }, labelStyle, extraLabelStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      }\n    }, label) : label));\n  }));\n};\n\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default DrawerNavigatorItems;","map":{"version":3,"sources":["DrawerNavigatorItems.tsx"],"names":["DrawerNavigatorItems","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","focused","route","color","backgroundColor","scene","index","tintColor","icon","label","accessibilityLabel","extraLabelStyle","StyleSheet","container","paddingVertical","item","flexDirection","alignItems","marginHorizontal","width","inactiveIcon","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route } from '../types';\n\nexport type Props = {\n  items: Route[];\n  activeItemKey?: string | null;\n  activeTintColor?: string;\n  activeBackgroundColor?: string;\n  inactiveTintColor?: string;\n  inactiveBackgroundColor?: string;\n  getLabel: (scene: Scene) => React.ReactNode;\n  renderIcon: (scene: Scene) => React.ReactNode;\n  onItemPress: (scene: { route: Route; focused: boolean }) => void;\n  itemsContainerStyle?: ViewStyle;\n  itemStyle?: ViewStyle;\n  labelStyle?: TextStyle;\n  activeLabelStyle?: TextStyle;\n  inactiveLabelStyle?: TextStyle;\n  iconContainerStyle?: ViewStyle;\n  drawerPosition: 'left' | 'right';\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  activeLabelStyle,\n  inactiveLabelStyle,\n  iconContainerStyle,\n  drawerPosition,\n}: Props) => (\n  <View style={[styles.container, itemsContainerStyle]}>\n    {items.map((route, index: number) => {\n      const focused = activeItemKey === route.key;\n      const color = focused ? activeTintColor : inactiveTintColor;\n      const backgroundColor = focused\n        ? activeBackgroundColor\n        : inactiveBackgroundColor;\n      const scene = { route, index, focused, tintColor: color };\n      const icon = renderIcon(scene);\n      const label = getLabel(scene);\n      const accessibilityLabel = typeof label === 'string' ? label : undefined;\n      const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n      return (\n        <TouchableItem\n          key={route.key}\n          accessible\n          accessibilityLabel={accessibilityLabel}\n          onPress={() => {\n            onItemPress({ route, focused });\n          }}\n          delayPressIn={0}\n        >\n          <SafeAreaView\n            style={[{ backgroundColor }, styles.item, itemStyle]}\n            forceInset={{\n              [drawerPosition]: 'always',\n              [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n              vertical: 'never',\n            }}\n          >\n            {icon ? (\n              <View\n                style={[\n                  styles.icon,\n                  focused ? null : styles.inactiveIcon,\n                  iconContainerStyle,\n                ]}\n              >\n                {icon}\n              </View>\n            ) : null}\n            {typeof label === 'string' ? (\n              <Text\n                style={[styles.label, { color }, labelStyle, extraLabelStyle]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label\n            )}\n          </SafeAreaView>\n        </TouchableItem>\n      );\n    })}\n  </View>\n);\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n\nexport default DrawerNavigatorItems;\n"]},"metadata":{},"sourceType":"module"}