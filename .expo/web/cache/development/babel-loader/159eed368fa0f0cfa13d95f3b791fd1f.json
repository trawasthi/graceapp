{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport { SwitchRouter, NavigationActions } from '@react-navigation/core';\nimport * as DrawerActions from \"./DrawerActions\";\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nvar getActiveRouteKey = function getActiveRouteKey(route) {\n  if (route.routes && typeof route.index === 'number' && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = _objectSpread({}, config);\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n  var switchRouter = SwitchRouter(routeConfigs, config);\n  return _objectSpread({}, switchRouter, {\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread({\n        openDrawer: function openDrawer() {\n          return DrawerActions.openDrawer({\n            key: navStateKey\n          });\n        },\n        closeDrawer: function closeDrawer() {\n          return DrawerActions.closeDrawer({\n            key: navStateKey\n          });\n        },\n        toggleDrawer: function toggleDrawer() {\n          return DrawerActions.toggleDrawer({\n            key: navStateKey\n          });\n        }\n      }, switchRouter.getActionCreators(route, navStateKey));\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return _objectSpread({}, switchRouter.getStateForAction(action, undefined), {\n          isDrawerOpen: false\n        });\n      }\n\n      var isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        if (action.type === DrawerActions.CLOSE_DRAWER || action.type === NavigationActions.BACK && state.isDrawerOpen) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: false\n          });\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: true\n          });\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: !state.isDrawerOpen\n          });\n        }\n      }\n\n      var switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        return null;\n      }\n\n      if (switchedState !== state) {\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && state.isDrawerOpen) {\n          return _objectSpread({}, switchedState, {\n            isDrawerOpen: false\n          });\n        }\n\n        return switchedState;\n      }\n\n      return state;\n    }\n  });\n});","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["obj","getActiveRouteKey","route","config","withDefaultValue","switchRouter","SwitchRouter","getActionCreators","openDrawer","DrawerActions","key","closeDrawer","toggleDrawer","getStateForAction","isDrawerOpen","isRouterTargeted","action","state","NavigationActions","switchedState"],"mappings":"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","sourcesContent":["import { SwitchRouter, NavigationActions } from '@react-navigation/core';\nimport * as DrawerActions from './DrawerActions';\n\ntype Route = {\n  key: string;\n  index?: number;\n  routes?: Route[];\n};\n\ntype Action = {\n  key: null;\n  type: string;\n  willShow: any;\n};\n\ntype State = Route & {\n  isDrawerOpen?: any;\n};\n\nfunction withDefaultValue(obj: object, key: string, defaultValue: any): any {\n  // @ts-ignore\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  // @ts-ignore\n  obj[key] = defaultValue;\n  return obj;\n}\n\nconst getActiveRouteKey = (route: Route): string => {\n  if (\n    route.routes &&\n    typeof route.index === 'number' &&\n    route.routes[route.index]\n  ) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default (\n  routeConfigs: object,\n  config: {\n    unmountInactiveRoutes?: boolean;\n    resetOnBlur?: boolean;\n    initialRouteName?: string;\n  } = {}\n) => {\n  config = { ...config };\n  config = withDefaultValue(\n    config,\n    'resetOnBlur',\n    config.unmountInactiveRoutes ? true : !!config.resetOnBlur\n  );\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  return {\n    ...switchRouter,\n\n    getActionCreators(route: Route, navStateKey: string) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\n        ...switchRouter.getActionCreators(route, navStateKey),\n      };\n    },\n\n    getStateForAction(action: Action, state: State) {\n      // Set up the initial state if needed\n      if (!state) {\n        return {\n          ...switchRouter.getStateForAction(action, undefined),\n          isDrawerOpen: false,\n        };\n      }\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n        if (\n          action.type === DrawerActions.CLOSE_DRAWER ||\n          (action.type === NavigationActions.BACK && state.isDrawerOpen)\n        ) {\n          return {\n            ...state,\n            isDrawerOpen: false,\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: true,\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: !state.isDrawerOpen,\n          };\n        }\n      }\n\n      // Fall back on switch router for screen switching logic, and handling of child routers\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      }\n\n      // Has the switch router changed the state?\n      if (switchedState !== state) {\n        // If any navigation has happened, and the drawer is maybe open, make sure to close it\n        if (\n          getActiveRouteKey(switchedState) !== getActiveRouteKey(state) &&\n          state.isDrawerOpen\n        ) {\n          return {\n            ...switchedState,\n            isDrawerOpen: false,\n          };\n        }\n\n        // At this point, return the state as defined by the switch router.\n        // The active route key hasn't changed, so this most likely means that a child router has returned\n        // a new state like a param change, but the same key is still active and the drawer will remain open\n        return switchedState;\n      }\n\n      return state;\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}