{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock };\n\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\n\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function allow(orientationLock) {\n  console.warn(\"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\");\n  lockAsync(orientationLock);\n}\nexport function allowAsync(orientationLock) {\n  return _regeneratorRuntime.async(function allowAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.warn(\"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\");\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(lockAsync(orientationLock));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function lockAsync(orientationLock) {\n  var orientationLocks;\n  return _regeneratorRuntime.async(function lockAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoScreenOrientation.lockAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n\n        case 2:\n          orientationLocks = Object.values(OrientationLock);\n\n          if (orientationLocks.includes(orientationLock)) {\n            _context2.next = 5;\n            break;\n          }\n\n          throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n\n        case 5:\n          if (!(orientationLock === OrientationLock.OTHER)) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 7:\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockAsync(orientationLock));\n\n        case 9:\n          _lastOrientationLock = orientationLock;\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\nexport function lockPlatformAsync(options) {\n  var screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb, platformOrientationParam, orientations, _iterator, _isArray, _i, _ref, _orientation, webOrientationLocks;\n\n  return regeneratorRuntime.async(function lockPlatformAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (ExpoScreenOrientation.lockPlatformAsync) {\n          _context3.next = 2;\n          break;\n        }\n\n        throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n\n      case 2:\n        screenOrientationConstantAndroid = options.screenOrientationConstantAndroid, screenOrientationArrayIOS = options.screenOrientationArrayIOS, screenOrientationLockWeb = options.screenOrientationLockWeb;\n\n        if (!(Platform.OS === 'android' && screenOrientationConstantAndroid)) {\n          _context3.next = 9;\n          break;\n        }\n\n        if (!isNaN(screenOrientationConstantAndroid)) {\n          _context3.next = 6;\n          break;\n        }\n\n        throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \" + screenOrientationConstantAndroid);\n\n      case 6:\n        platformOrientationParam = screenOrientationConstantAndroid;\n        _context3.next = 37;\n        break;\n\n      case 9:\n        if (!(Platform.OS === 'ios' && screenOrientationArrayIOS)) {\n          _context3.next = 32;\n          break;\n        }\n\n        if (Array.isArray(screenOrientationArrayIOS)) {\n          _context3.next = 12;\n          break;\n        }\n\n        throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \" + screenOrientationArrayIOS);\n\n      case 12:\n        orientations = Object.values(Orientation);\n        _iterator = screenOrientationArrayIOS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();\n\n      case 14:\n        if (!_isArray) {\n          _context3.next = 20;\n          break;\n        }\n\n        if (!(_i >= _iterator.length)) {\n          _context3.next = 17;\n          break;\n        }\n\n        return _context3.abrupt(\"break\", 29);\n\n      case 17:\n        _ref = _iterator[_i++];\n        _context3.next = 24;\n        break;\n\n      case 20:\n        _i = _iterator.next();\n\n        if (!_i.done) {\n          _context3.next = 23;\n          break;\n        }\n\n        return _context3.abrupt(\"break\", 29);\n\n      case 23:\n        _ref = _i.value;\n\n      case 24:\n        _orientation = _ref;\n\n        if (orientations.includes(_orientation)) {\n          _context3.next = 27;\n          break;\n        }\n\n        throw new TypeError(`lockPlatformAsync iOS platform: ${_orientation} is not a valid Orientation`);\n\n      case 27:\n        _context3.next = 14;\n        break;\n\n      case 29:\n        platformOrientationParam = screenOrientationArrayIOS;\n        _context3.next = 37;\n        break;\n\n      case 32:\n        if (!(Platform.OS === 'web' && screenOrientationLockWeb)) {\n          _context3.next = 37;\n          break;\n        }\n\n        webOrientationLocks = Object.values(WebOrientationLock);\n\n        if (webOrientationLocks.includes(screenOrientationLockWeb)) {\n          _context3.next = 36;\n          break;\n        }\n\n        throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n\n      case 36:\n        platformOrientationParam = screenOrientationLockWeb;\n\n      case 37:\n        if (platformOrientationParam) {\n          _context3.next = 39;\n          break;\n        }\n\n        throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n\n      case 39:\n        _context3.next = 41;\n        return regeneratorRuntime.awrap(ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam));\n\n      case 41:\n        _lastOrientationLock = OrientationLock.OTHER;\n\n      case 42:\n      case \"end\":\n        return _context3.stop();\n    }\n  });\n}\nexport async function unlockAsync() {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n\n  await ExpoScreenOrientation.unlockAsync();\n}\nexport async function getOrientationAsync() {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\nexport async function getOrientationLockAsync() {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\nexport async function getPlatformOrientationLockAsync() {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock\n    };\n  } else {\n    return {};\n  }\n}\nexport async function supportsOrientationLockAsync(orientationLock) {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\nexport async function doesSupportAsync(orientationLock) {\n  console.warn(\"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\");\n  return await supportsOrientationLockAsync(orientationLock);\n}\n\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n}\n\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n\n  const subscription = _orientationChangeEmitter.addListener(getEventName(), async update => {\n    let orientationInfo, orientationLock;\n\n    if (Platform.OS === 'ios' || Platform.OS === 'web') {\n      orientationLock = update.orientationLock;\n      orientationInfo = update.orientationInfo;\n    } else {\n      [orientationLock, orientationInfo] = await Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n    }\n\n    listener({\n      orientationInfo,\n      orientationLock\n    });\n  });\n\n  _orientationChangeSubscribers.push(subscription);\n\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  let i = _orientationChangeSubscribers.length;\n\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}","map":{"version":3,"sources":["../../src/ScreenOrientation/ScreenOrientation.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationInfo,\n  OrientationLock,\n  PlatformOrientationInfo,\n  SizeClassIOS,\n  WebOrientationLock,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  SizeClassIOS,\n  OrientationInfo,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\nexport function allow(orientationLock: OrientationLock): void {\n  console.warn(\n    \"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\"\n  );\n  lockAsync(orientationLock);\n}\n\nexport async function allowAsync(orientationLock: OrientationLock): Promise<void> {\n  console.warn(\n    \"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\"\n  );\n  await lockAsync(orientationLock);\n}\n\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb,\n  } = options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\n\nexport async function getOrientationAsync(): Promise<OrientationInfo> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\nexport async function doesSupportAsync(orientationLock: OrientationLock): Promise<boolean> {\n  console.warn(\n    \"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\"\n  );\n  return await supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        [orientationLock, orientationInfo] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}